import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchNews } from './homeAPI';

const initialState = {
  news: [],
  status: 'idle',
  currentPage: 1,
  hasMorePages: true,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchNewsAsync = createAsyncThunk(
  'home/fetchNews',
  async (currentPage) => {
    const response = await fetchNews(currentPage);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const homeSlice = createSlice({
  name: 'home',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementPage: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.currentPage += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchNewsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload);
        state.news.push(...action.payload.articles);
        if(action.payload.articles.length < 20){
            state.hasMorePages = false;
        }
      });
  },
});

export const { incrementPage, decrement, incrementByAmount } = homeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const news = (state) => state.home.news;
export const currentPage = (state) => state.home.currentPage;
export const hasMorePages = (state) => state.home.hasMorePages;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = news(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default homeSlice.reducer;
