import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchNews, searchNews } from './homeAPI';

const initialState = {
  news: [],
  status: 'idle',
  currentPage: 1,
  hasMorePages: true,
  details: {},
  appendResults: false,
  lastUpdatedAt: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchNewsAsync = createAsyncThunk(
  'home/fetchNews',
  async (currentPage) => {
    const response = await fetchNews(currentPage);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const searchNewsAsync = createAsyncThunk(
  'home/searchNews',
  async ({...searchParameters}) => {
    const response = await searchNews({searchParameters});
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const homeSlice = createSlice({
  name: 'home',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementPage: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.currentPage += 1;
      state.appendResults = true;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },

    getDetails: (state, action) => {
      state.details = state.news[action.payload];
      state.appendResults = false;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchNewsAsync.fulfilled, (state, action) => {
        if(state.appendResults){
          state.news.push(...action.payload.articles);
        }else{
          state.news = action.payload.articles;
          state.currentPage = 1;
        }
        
        if(action.payload.articles.length < 20){
            state.hasMorePages = false;
        }else{
            state.hasMorePages = true;
        }
        state.lastUpdatedAt = new Date().toLocaleString("en-GB");;
      })
      .addCase(searchNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchNewsAsync.fulfilled, (state, action) => {
          state.news = action.payload.articles;
        
          if(action.payload.articles.length < 20){
              state.hasMorePages = false;
          }else{
              state.hasMorePages = true;
          }
          state.lastUpdatedAt = new Date().toLocaleString("en-GB");;
      });
  },
});

export const { incrementPage, decrement, incrementByAmount, getDetails } = homeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const news = (state) => state.home.news;
export const currentPage = (state) => state.home.currentPage;
export const hasMorePages = (state) => state.home.hasMorePages;
export const details = (state) => state.home.details;
export const lastUpdatedAt = (state) => state.home.lastUpdatedAt;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const getNewsById = (id) => (dispatch, getState) => {
  dispatch(getDetails(id));
};

export default homeSlice.reducer;
