import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchNews } from './homeAPI';

const pageSize = process.env.REACT_APP_PAGE_SIZE || 20;
const initialState = {
  news: [],
  status: 'idle',
  currentPage: 1,
  hasMorePages: true,
  details: {},
  appendResults: false,
  lastUpdatedAt: null,
  endPoint: 'top-headlines',
  searchTerm: '',
  searchCategory: '',
  theme: 'light',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchNewsAsync = createAsyncThunk(
  'home/fetchNews',
  async ({...searchParameters}, thunkAPI) => {
    const state = thunkAPI.getState();
    const { searchTerm, searchCategory } = state.home;
    searchParameters.searchTerm = searchTerm;
    searchParameters.searchCategory = searchCategory;
    const response = await fetchNews({searchParameters});
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const homeSlice = createSlice({
  name: 'home',
  initialState,
  reducers: {
    incrementPage: (state) => {
      state.currentPage += 1;
      state.appendResults = true;
    },

    getDetails: (state, action) => {
      state.details = state.news[action.payload];
      state.appendResults = false;
    },

    changeEndPoint: (state, action) => {
      state.endPoint = action.payload.endPoint;
      state.searchCategory = action.payload.searchCategory;
      state.searchTerm = action.payload.searchTerm;
      state.appendResults = false;
    },

    setSearchCategory: (state, action) => {
      state.searchCategory = action.payload;
    },

    setSearchTerm: (state, action) => {
      state.searchTerm = action.payload;
    },

    setCurrentPage: (state, action) => {
      state.currentPage = action.payload;
    },

    setEndPoint: (state, action) => {
      state.endPoint = action.payload;
    },

    setTheme: (state, action) => {
      state.theme = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchNewsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchNewsAsync.fulfilled, (state, action) => {
        if(state.appendResults){
          state.news.push(...action.payload.articles);
        }else{
          state.news = action.payload.articles;
          state.currentPage = 1;
        }
        
        if(action.payload.articles.length < pageSize){
            state.hasMorePages = false;
        }else{
            state.hasMorePages = true;
        }
        state.status = 'idle';
        state.lastUpdatedAt = new Date().toLocaleString(process.env.REACT_APP_LOCALE);;
      })
  },
});

export const { incrementPage, decrement, incrementByAmount, getDetails, changeEndPoint, setSearchCategory, setSearchTerm, setCurrentPage, setEndPoint, setTheme } = homeSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const news = (state) => state.home.news;
export const currentPage = (state) => state.home.currentPage;
export const hasMorePages = (state) => state.home.hasMorePages;
export const details = (state) => state.home.details;
export const lastUpdatedAt = (state) => state.home.lastUpdatedAt;
export const currentEndPoint = (state) => state.home.endPoint;
export const getSearchTerm = (state) => state.home.searchTerm;
export const getSearchCategory = (state) => state.home.searchCategory;
export const getStatus = (state) => state.home.status;
export const getTheme = (state) => state.home.theme;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const getNewsById = (id) => (dispatch, getState) => {
  dispatch(getDetails(id));
};

export default homeSlice.reducer;
